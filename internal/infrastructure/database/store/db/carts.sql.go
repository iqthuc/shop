// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: carts.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const checkIfVariantStockSufficient = `-- name: CheckIfVariantStockSufficient :one
SELECT id, product_id, sku, price, stock_quantity, sold, image_url, is_default
FROM product_variants
WHERE id= $1 AND stock_quantity > $2
`

type CheckIfVariantStockSufficientParams struct {
	ID            int32 `json:"id"`
	StockQuantity int32 `json:"stock_quantity"`
}

func (q *Queries) CheckIfVariantStockSufficient(ctx context.Context, arg CheckIfVariantStockSufficientParams) (ProductVariant, error) {
	row := q.db.QueryRow(ctx, checkIfVariantStockSufficient, arg.ID, arg.StockQuantity)
	var i ProductVariant
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Sku,
		&i.Price,
		&i.StockQuantity,
		&i.Sold,
		&i.ImageUrl,
		&i.IsDefault,
	)
	return i, err
}

const upsertCarts = `-- name: UpsertCarts :one
INSERT INTO
    carts (user_id)
VALUES ($1)
ON CONFLICT (user_id) DO UPDATE
SET
    user_id = EXCLUDED.user_id
RETURNING id
`

func (q *Queries) UpsertCarts(ctx context.Context, userID uuid.UUID) (int32, error) {
	row := q.db.QueryRow(ctx, upsertCarts, userID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const upsertToCartItems = `-- name: UpsertToCartItems :exec
INSERT INTO cart_items(cart_id, product_variant_id, quantity)
VALUES ($1, $2, $3)
ON CONFLICT (cart_id, product_variant_id) DO UPDATE
SET quantity = cart_items.quantity + EXCLUDED.quantity
`

type UpsertToCartItemsParams struct {
	CartID           int32 `json:"cart_id"`
	ProductVariantID int32 `json:"product_variant_id"`
	Quantity         int32 `json:"quantity"`
}

func (q *Queries) UpsertToCartItems(ctx context.Context, arg UpsertToCartItemsParams) error {
	_, err := q.db.Exec(ctx, upsertToCartItems, arg.CartID, arg.ProductVariantID, arg.Quantity)
	return err
}
